#include "cmath"
#include "cinttypes"

#ifndef LIB_CROSSFIRE_H
#define LIB_CROSSFIRE_H

//#define CRSF_BAUDRATE           420000

#if !defined(DIM)
#define DIM(__arr) (sizeof((__arr)) / sizeof((__arr)[0]))
#endif

enum {
	CRSF_SYNC_BYTE = 0xC8,
	CRSF_FRAME_SIZE_MAX = 64, // 62 bytes frame plus 2 bytes frame header(<length><type>)
	CRSF_PAYLOAD_SIZE_MAX = CRSF_FRAME_SIZE_MAX - 6,
	CRSF_FRAME_TX_MSP_FRAME_SIZE = 58,
	CRSF_FRAME_RX_MSP_FRAME_SIZE = 8,
	CRSF_FRAME_ORIGIN_DEST_SIZE = 2,
};

typedef enum {
	CRSF_ADDRESS_BROADCAST = 0x00,
	CRSF_ADDRESS_USB = 0x10,
	CRSF_ADDRESS_TBS_CORE_PNP_PRO = 0x80,
	CRSF_ADDRESS_RESERVED1 = 0x8A,
	CRSF_ADDRESS_CURRENT_SENSOR = 0xC0,
	CRSF_ADDRESS_GPS = 0xC2,
	CRSF_ADDRESS_TBS_BLACKBOX = 0xC4,
	CRSF_ADDRESS_FLIGHT_CONTROLLER = 0xC8,
	CRSF_ADDRESS_RESERVED2 = 0xCA,
	CRSF_ADDRESS_RACE_TAG = 0xCC,
	CRSF_ADDRESS_RADIO_RADIO = 0xEA,
	CRSF_ADDRESS_CRSF_MODULE = 0xEE,
	CRSF_ADDRESS_CRSF_RECEIVER = 0xEC
} crossfire_address_t;

typedef enum {
	CRSF_FRAMETYPE_GPS = 0x02,
	CRSF_FRAMETYPE_VARIO = 0x07,
	CRSF_FRAMETYPE_BATTERY = 0x08,
	CRSF_FRAMETYPE_LINK = 0x14,
	CRSF_FRAMETYPE_RC_CHANNELS = 0x16,
	CRSF_FRAMETYPE_ATTITUDE = 0x1E,
	CRSF_FRAMETYPE_FLIGHT_MODE = 0x21,

	// Extended Header Frames, range: 0x28 to 0x96
	CRSF_FRAMETYPE_DEVICE_PING = 0x28,
	CRSF_FRAMETYPE_DEVICE_INFO = 0x29,
	CRSF_FRAMETYPE_SETTINGS_REQUEST = 0x2A,
	CRSF_FRAMETYPE_SETTINGS_RESPONSE = 0x2B,
	CRSF_FRAMETYPE_PARAMETER_READ = 0x2C,
	CRSF_FRAMETYPE_PARAMETER_WRITE = 0x2D,
	CRSF_FRAMETYPE_COMMAND = 0x32,

	// MSP commands
	CRSF_FRAMETYPE_MSP_REQ = 0x7A,   // response request using msp sequence as command
	CRSF_FRAMETYPE_MSP_RESP = 0x7B,  // reply with 58 byte chunked binary
	CRSF_FRAMETYPE_MSP_WRITE = 0x7C,  // write with 8 byte chunked binary (OpenTX outbound telemetry buffer limit)
	CRSF_FRAMETYPE_DISPLAYPORT_CMD = 0x7D, // displayport control command
} crossfire_frame_type_t;

typedef enum {
	CRSF_RX_RSSI1,
	CRSF_RX_RSSI2,
	CRSF_RX_QUALITY,
	CRSF_RX_SNR,
	CRSF_RX_ANTENNA,
	CRSF_RF_MODE,
	CRSF_TX_POWER,
	CRSF_TX_RSSI,
	CRSF_TX_QUALITY,
	CRSF_TX_SNR,
	CRSF_BATT_VOLTAGE,
	CRSF_BATT_CURRENT,
	CRSF_BATT_CAPACITY,
	CRSF_GPS_LATITUDE,
	CRSF_GPS_LONGITUDE,
	CRSF_GPS_GROUND_SPEED,
	CRSF_GPS_HEADING,
	CRSF_GPS_ALTITUDE,
	CRSF_GPS_SATELLITES,
	CRSF_ATTITUDE_PITCH,
	CRSF_ATTITUDE_ROLL,
	CRSF_ATTITUDE_YAW,
	CRSF_FLIGHT_MODE,
	CRSF_VERTICAL_SPEED,
	CRSF_UNKNOWN,
} crossfire_sensor_idx_t;

typedef enum {
	UNIT_RAW,
	UNIT_VOLTS,
	UNIT_AMPS,
	UNIT_MILLIAMPS,
	UNIT_KTS,
	UNIT_METERS_PER_SECOND,
	UNIT_FEET_PER_SECOND,
	UNIT_KMH,
	UNIT_SPEED = UNIT_KMH,
	UNIT_MPH,
	UNIT_METERS,
	UNIT_DIST = UNIT_METERS,
	UNIT_FEET,
	UNIT_CELSIUS,
	UNIT_TEMPERATURE = UNIT_CELSIUS,
	UNIT_FAHRENHEIT,
	UNIT_PERCENT,
	UNIT_MAH,
	UNIT_WATTS,
	UNIT_MILLIWATTS,
	UNIT_DB,
	UNIT_RPMS,
	UNIT_G,
	UNIT_DEGREE,
	UNIT_RADIANS,
	UNIT_MILLILITERS,
	UNIT_FLOZ,
	UNIT_MILLILITERS_PER_MINUTE,
	UNIT_MAX = UNIT_MILLILITERS_PER_MINUTE,
	UNIT_SPARE1,
	UNIT_SPARE2,
	UNIT_SPARE3,
	UNIT_SPARE4,
	UNIT_SPARE5,
	UNIT_SPARE6,
	UNIT_SPARE7,
	UNIT_SPARE8,
	UNIT_SPARE9,
	UNIT_SPARE10,
	UNIT_HOURS,
	UNIT_MINUTES,
	UNIT_SECONDS,
	UNIT_FIRST_VIRTUAL,
	UNIT_CELLS = UNIT_FIRST_VIRTUAL,
	UNIT_DATETIME,
	UNIT_GPS,
	UNIT_BITFIELD,
	UNIT_TEXT,
	UNIT_GPS_LONGITUDE,
	UNIT_GPS_LATITUDE,
	UNIT_DATETIME_YEAR,
	UNIT_DATETIME_DAY_MONTH,
	UNIT_DATETIME_HOUR_MIN,
	UNIT_DATETIME_SEC
} telemetry_unit_idx_t;

typedef struct {
	const uint8_t id;
	const uint8_t subId;
	const telemetry_unit_idx_t unit;
	const uint8_t precision;
	const char *name;
	double value;
} crossfire_sensor_t;

bool crsf_telemetry_checksum();

bool crsf_telemetry_get_value(int N, size_t index, int &value);

void crsf_telemetry_set_value(size_t index, int value);

void crsf_telemetry_push_byte(uint8_t data);

void crsf_telemetry_push_byte(uint8_t *data, int len);

void crsf_telemetry_process_data();

crossfire_sensor_t crsf_telemetry_get_sensor(crossfire_sensor_idx_t);

#endif //LIB_CROSSFIRE_H
